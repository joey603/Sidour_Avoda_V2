#!/usr/bin/env python3
"""
Script de test pour comparer les interfaces Sidour Avoda
Permet de choisir entre l'interface originale et l'interface modernis√©e
"""

import tkinter as tk
from tkinter import ttk, messagebox
import sys
import os

def launch_original_interface():
    """Lance l'interface originale"""
    try:
        from interface import InterfacePlanning
        app = InterfacePlanning(repos_minimum_entre_gardes=8)
        app.root.title("Sidour Avoda - Interface Originale")
        app.run()
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur lors du lancement de l'interface originale:\n{str(e)}")

def launch_modern_interface():
    """Lance l'interface modernis√©e"""
    try:
        from interface_2 import InterfacePlanning
        app = InterfacePlanning(repos_minimum_entre_gardes=8)
        app.root.title("Sidour Avoda Pro - Interface Modernis√©e")
        app.run()
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur lors du lancement de l'interface modernis√©e:\n{str(e)}")

def create_test_window():
    """Cr√©e la fen√™tre de s√©lection d'interface"""
    root = tk.Tk()
    root.title("Sidour Avoda - S√©lecteur d'Interface")
    root.geometry("500x300")
    root.resizable(False, False)
    
    # Centrer la fen√™tre
    root.update_idletasks()
    w = root.winfo_width()
    h = root.winfo_height()
    sw = root.winfo_screenwidth()
    sh = root.winfo_screenheight()
    x = (sw - w) // 2
    y = (sh - h) // 2
    root.geometry(f"{w}x{h}+{x}+{y}")
    
    # Style moderne
    style = ttk.Style()
    style.theme_use('clam')
    
    # Frame principal
    main_frame = ttk.Frame(root, padding=20)
    main_frame.pack(fill="both", expand=True)
    
    # Titre
    title_label = ttk.Label(main_frame, text="Sidour Avoda", 
                           font=("Helvetica", 18, "bold"))
    title_label.pack(pady=(0, 10))
    
    subtitle_label = ttk.Label(main_frame, text="S√©lecteur d'Interface", 
                              font=("Helvetica", 12))
    subtitle_label.pack(pady=(0, 30))
    
    # Description
    desc_frame = ttk.LabelFrame(main_frame, text="Choisissez votre interface", padding=15)
    desc_frame.pack(fill="x", pady=(0, 20))
    
    ttk.Label(desc_frame, text="‚Ä¢ Interface Originale : Design classique Tkinter", 
              font=("Helvetica", 10)).pack(anchor="w", pady=2)
    ttk.Label(desc_frame, text="‚Ä¢ Interface Modernis√©e : Design Bootstrap avec ttkbootstrap", 
              font=("Helvetica", 10)).pack(anchor="w", pady=2)
    
    # Boutons
    button_frame = ttk.Frame(main_frame)
    button_frame.pack(pady=20)
    
    # Bouton interface originale
    btn_original = ttk.Button(button_frame, text="üé® Interface Originale", 
                             command=lambda: [root.destroy(), launch_original_interface()],
                             style="TButton")
    btn_original.pack(side="left", padx=10)
    
    # Bouton interface modernis√©e
    btn_modern = ttk.Button(button_frame, text="‚ú® Interface Modernis√©e", 
                           command=lambda: [root.destroy(), launch_modern_interface()],
                           style="TButton")
    btn_modern.pack(side="left", padx=10)
    
    # Bouton quitter
    btn_quit = ttk.Button(main_frame, text="‚ùå Quitter", 
                         command=root.destroy)
    btn_quit.pack(pady=(20, 0))
    
    # Informations
    info_label = ttk.Label(main_frame, text="üí° Les deux interfaces ont les m√™mes fonctionnalit√©s", 
                          font=("Helvetica", 9), foreground="gray")
    info_label.pack(pady=(10, 0))
    
    return root

def main():
    """Fonction principale"""
    try:
        # V√©rifier que les modules sont disponibles
        try:
            import interface
        except ImportError:
            messagebox.showerror("Erreur", "Module 'interface' non trouv√©")
            return
        
        try:
            import interface_2
        except ImportError:
            messagebox.showerror("Erreur", "Module 'interface_2' non trouv√©")
            return
        
        # Cr√©er et lancer la fen√™tre de s√©lection
        root = create_test_window()
        root.mainloop()
        
    except Exception as e:
        print(f"Erreur: {str(e)}")
        messagebox.showerror("Erreur", f"Erreur lors du lancement:\n{str(e)}")

if __name__ == "__main__":
    main()
