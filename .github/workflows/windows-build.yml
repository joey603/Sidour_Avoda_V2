name: build-windows-installer

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow
          if (Test-Path "requirements.txt") {
            pip install -r requirements.txt
          } elseif (Test-Path "Sidour-avoda-Tzora-chevron/requirements.txt") {
            pip install -r "Sidour-avoda-Tzora-chevron/requirements.txt"
          } else {
            Write-Host "No requirements.txt found, continuing with PyInstaller only."
          }

      - name: Prepare icon (.ico from PNG if needed)
        shell: pwsh
        run: |
          $pngCandidates = @(
            "Sidour-avoda-Tzora-chevron/assets/calender-2389150_960_720.png",
            "assets/calender-2389150_960_720.png"
          )
          $icoTargets = @(
            "Sidour-avoda-Tzora-chevron/assets/app.ico",
            "assets/app.ico"
          )
          $icoExists = $false
          foreach ($p in $icoTargets) { if (Test-Path $p) { $icoExists = $true } }
          if (-not $icoExists) {
            $pngPath = $null
            foreach ($c in $pngCandidates) { if (Test-Path $c) { $pngPath = $c; break } }
            if ($pngPath) {
              $targetIco = if ($pngPath -like "Sidour-avoda-Tzora-chevron/*") { "Sidour-avoda-Tzora-chevron/assets/app.ico" } else { "assets/app.ico" }
              $targetDir = Split-Path $targetIco -Parent
              if (-not (Test-Path $targetDir)) { New-Item -ItemType Directory -Force -Path $targetDir | Out-Null }
              Write-Host "Converting $pngPath to $targetIco"
              $env:PNG_SRC = $pngPath
              $env:ICO_DST = $targetIco
              $tmp = Join-Path $env:TEMP "make_ico.py"
              $pyLines = @(
                'import os'
                'from PIL import Image'
                'src = os.environ["PNG_SRC"]'
                'dst = os.environ["ICO_DST"]'
                'sizes = [(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]'
                'img = Image.open(src).convert("RGBA")'
                'img.save(dst, format="ICO", sizes=sizes)'
                'print(f"ICO written: {dst}")'
              )
              $pyLines | Set-Content -Path $tmp -Encoding utf8
              python $tmp
            }
          }

      - name: Build portable exe with PyInstaller
        shell: pwsh
        run: |
          $proj = if (Test-Path "Sidour-avoda-Tzora-chevron/main.py") { "Sidour-avoda-Tzora-chevron" } elseif (Test-Path "main.py") { "." } else { "." }
          Set-Location $proj
          $main = "main.py"
          $icon = if (Test-Path "assets/app.ico") { "assets/app.ico" } else { $null }
          $pngIcon = if (Test-Path "assets/calender-2389150_960_720.png") { "assets/calender-2389150_960_720.png" } else { $null }
          $db = if (Test-Path "planning_data.db") { "planning_data.db" } elseif (Test-Path "../planning_data.db") { "../planning_data.db" } else { $null }

          $piArgs = @("--noconsole", "--name", "SidourAvoda", "--clean")
          # Assurer que le répertoire des modules locaux est dans l'analyse
          $piArgs += @('--paths', '.')
          # Forcer l'inclusion de modules locaux si l'analyse statique les rate
          $hidden = @('interface','planning','database','horaire','travailleur','tkinter','tkinter.ttk')
          foreach ($m in $hidden) { $piArgs += @('--hidden-import', $m) }
          if ($icon) {
            try {
              $iconFull = (Resolve-Path $icon).Path
            } catch {
              $iconFull = $icon
            }
            $piArgs += @("--icon", $iconFull)
          }
          if ($db) {
            $piArgs += @("--add-data", "$db;.")
          }
          # Toujours embarquer le PNG utilisé par Tkinter
          if ($pngIcon) { $piArgs += @("--add-data", "$pngIcon;assets") }
          # Ajouter interface.py comme data pour fallback de chargement runtime
          if (Test-Path "interface.py") {
            $piArgs += @("--add-data", "interface.py;.")
          }
          $piArgs += @($main)

          Write-Host ("PyInstaller arg list: " + ($piArgs -join ' '))
          pyinstaller @piArgs

      - name: Create versioned copy of portable exe
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          if (-not $version -or -not $version.StartsWith('v')) { $version = (Get-Date -Format 'yyyyMMddHHmmss') }
          $src = if (Test-Path 'Sidour-avoda-Tzora-chevron/dist/SidourAvoda/SidourAvoda.exe') { 'Sidour-avoda-Tzora-chevron/dist/SidourAvoda/SidourAvoda.exe' } elseif (Test-Path 'dist/SidourAvoda/SidourAvoda.exe') { 'dist/SidourAvoda/SidourAvoda.exe' } else { $null }
          if ($src) {
            $dir = Split-Path $src -Parent
            $dst = Join-Path $dir ("SidourAvoda-" + $version + ".exe")
            Copy-Item $src $dst -Force
            Write-Host "Created versioned portable exe: $dst"
          } else {
            Write-Host 'Portable exe not found to version-copy.'
          }

      - name: Upload portable build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sidour-avoda-win-portable
          path: |
            dist/**
            Sidour-avoda-Tzora-chevron/dist/**

      - name: Install Inno Setup
        run: choco install innosetup --yes

      - name: Build Windows installer (Inno Setup)
        shell: pwsh
        run: |
          # Ensure installer icon exists relative to the .iss script
          if (-not (Test-Path "Sidour-avoda-Tzora-chevron/assets/app.ico")) {
            if (Test-Path "assets/app.ico") {
              New-Item -ItemType Directory -Force -Path "Sidour-avoda-Tzora-chevron/assets" | Out-Null
              Copy-Item "assets/app.ico" "Sidour-avoda-Tzora-chevron/assets/app.ico" -Force
            }
          }
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "Sidour-avoda-Tzora-chevron\windows_installer.iss"

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: sidour-avoda-setup
          path: Sidour-avoda-Tzora-chevron/dist_installer/**

      - name: Create GitHub Release and upload assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Sidour-avoda-Tzora-chevron/dist_installer/Sidour-Avoda-Setup.exe
            Sidour-avoda-Tzora-chevron/dist/SidourAvoda/SidourAvoda.exe
            Sidour-avoda-Tzora-chevron/dist/SidourAvoda/SidourAvoda-${{ github.ref_name }}.exe


