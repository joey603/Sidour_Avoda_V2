name: build-macos-app

on:
  workflow_dispatch:
  push:
    branches:
      - macos-build

jobs:
  build:
    name: Build macOS (${{ matrix.runner }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13   # Intel x86_64
          - runner: macos-14   # Apple Silicon arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f "Sidour-avoda-Tzora-chevron/requirements.txt" ]; then
            pip install -r "Sidour-avoda-Tzora-chevron/requirements.txt"
          else
            echo "No requirements.txt found, continuing with PyInstaller only."
          fi

      - name: Build .app with PyInstaller
        shell: bash
        run: |
          set -euo pipefail
          PROJ_DIR="Sidour-avoda-Tzora-chevron"
          if [ -f "main.py" ]; then PROJ_DIR="."; fi
          cd "$PROJ_DIR"
          MAIN=main.py
          APP_NAME="SidourAvoda"
          EXTRA_ARGS=(
            --noconsole
            --windowed
            --name "$APP_NAME"
            --clean
            --paths .
            --hidden-import interface --hidden-import planning --hidden-import database --hidden-import horaire --hidden-import travailleur --hidden-import tkinter --hidden-import tkinter.ttk
          )
          # Bundle assets if present
          if [ -f assets/calender-2389150_960_720.png ]; then
            EXTRA_ARGS+=(--add-data "assets/calender-2389150_960_720.png:assets")
          fi
          if [ -f ../planning_data.db ]; then
            EXTRA_ARGS+=(--add-data "../planning_data.db:.")
          elif [ -f planning_data.db ]; then
            EXTRA_ARGS+=(--add-data "planning_data.db:.")
          fi
          echo "PyInstaller args: ${EXTRA_ARGS[@]} $MAIN"
          pyinstaller ${EXTRA_ARGS[@]} "$MAIN"
          echo "Built app at dist/$APP_NAME.app"

      - name: Create DMG with improved Gatekeeper handling
        shell: bash
        run: |
          set -euo pipefail
          PROJ_DIR="Sidour-avoda-Tzora-chevron"
          if [ -d "dist" ] && [ -d "dist/SidourAvoda.app" ]; then PROJ_DIR="."; fi
          APP_PATH="$PROJ_DIR/dist/SidourAvoda.app"
          [ -d "$APP_PATH" ] || { echo "App not found: $APP_PATH"; exit 1; }
          ARCH=$(uname -m)
          DMG_NAME="SidourAvoda-${ARCH}.dmg"
          
          # Stage folder
          STAGE="dmg_staging"
          rm -rf "$STAGE"; mkdir -p "$STAGE"
          cp -R "$APP_PATH" "$STAGE/"
          
          # Add Applications symlink for drag-and-drop install
          ln -s /Applications "$STAGE/Applications" || true
          
          # Create comprehensive README with multiple solutions
          cat > "$STAGE/üìã LIRE-AVANT-TOUT.txt" <<'TXT'
          Sidour Avoda - macOS
          ====================
          
          üö® ATTENTION : macOS peut afficher un avertissement de s√©curit√©
          
          Solutions GRATUITES pour ouvrir l'application :
          
          üü¢ SOLUTION 1 (Recommand√©e) :
          - Clic droit sur "SidourAvoda.app" 
          - S√©lectionner "Ouvrir"
          - Cliquer "Ouvrir" dans la popup
          
          üü¢ SOLUTION 2 (Automatique) :
          - Double-cliquer sur "üîì Ouvrir-SidourAvoda.command"
          - Entrer votre mot de passe si demand√©
          
          üü¢ SOLUTION 3 (Manuelle) :
          - Ouvrir Terminal (Applications > Utilitaires)
          - Taper : xattr -dr com.apple.quarantine /Applications/SidourAvoda.app
          - Puis double-cliquer sur l'app
          
          üü¢ SOLUTION 4 (Pr√©f√©rences Syst√®me) :
          - Pr√©f√©rences Syst√®me > S√©curit√© et confidentialit√©
          - Cliquer "Autoriser" √† c√¥t√© de SidourAvoda
          
          ‚úÖ Apr√®s la premi√®re ouverture, l'app fonctionnera normalement.
          
          Note : Cette app est d√©velopp√©e en Python et n'est pas sign√©e par Apple,
          mais elle est 100% s√ªre et open source.
          TXT
          
          # Create automatic opener script
          cat > "$STAGE/üîì Ouvrir-SidourAvoda.command" <<'SH'
          #!/bin/bash
          set -euo pipefail
          
          echo "üîì Ouverture automatique de Sidour Avoda..."
          echo "Cette action peut demander votre mot de passe."
          echo ""
          
          # Get script directory
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          APP_PATH="$SCRIPT_DIR/SidourAvoda.app"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "‚ùå Erreur : SidourAvoda.app introuvable dans $SCRIPT_DIR"
            echo "Assurez-vous que l'app est dans le m√™me dossier que ce script."
            read -p "Appuyez sur Entr√©e pour fermer..."
            exit 1
          fi
          
          echo "üì± Suppression de l'attribut de quarantaine..."
          xattr -dr com.apple.quarantine "$APP_PATH" 2>/dev/null || {
            echo "‚ö†Ô∏è  Impossible de supprimer la quarantaine automatiquement."
            echo "Essayez la Solution 1 (clic droit > Ouvrir) ou la Solution 3 (Terminal)."
            read -p "Appuyez sur Entr√©e pour fermer..."
            exit 1
          }
          
          echo "‚úÖ Quarantaine supprim√©e avec succ√®s !"
          echo "üöÄ Lancement de Sidour Avoda..."
          
          # Open the app
          open "$APP_PATH"
          
          echo "‚úÖ Sidour Avoda devrait maintenant s'ouvrir !"
          echo "Fermez cette fen√™tre."
          sleep 2
          SH
          
          chmod +x "$STAGE/üîì Ouvrir-SidourAvoda.command"
          
          # Create DMG
          hdiutil create -volname "SidourAvoda" -srcfolder "$STAGE" -ov -format UDZO "$DMG_NAME"
          echo "DMG created: $DMG_NAME"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: sidour-avoda-macos-${{ matrix.runner }}
          path: |
            SidourAvoda-*.dmg
            dist/**
            Sidour-avoda-Tzora-chevron/dist/**

  # Optional: Notarization job (requires Apple Developer account)
  notarize:
    name: Notarize App (Optional)
    runs-on: macos-14
    needs: build
    if: ${{ true }}  # Set to true if you have Apple Developer credentials
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: sidour-avoda-macos-macos-14
          path: ./artifacts
      
      - name: Setup notarization
        run: |
          # This would require Apple Developer credentials
          # For free notarization, you need:
          # 1. Apple Developer account (free)
          # 2. App-specific password
          # 3. Team ID
          echo "Notarization requires Apple Developer credentials"
          echo "To enable:"
          echo "1. Create free Apple Developer account"
          echo "2. Add secrets: APPLE_ID, APPLE_APP_SPECIFIC_PASSWORD, TEAM_ID"
          echo "3. Set if: \${{ false }} to if: \${{ true }}"
      
      - name: Extract app from DMG
        run: |
          # Find the DMG file
          DMG_FILE=$(find . -name "*.dmg" | head -1)
          if [ -z "$DMG_FILE" ]; then
            echo "‚ùå No DMG file found"
            exit 1
          fi
          echo "üì¶ Found DMG: $DMG_FILE"
          
          # Mount and extract the app
          hdiutil attach "$DMG_FILE" -readonly
          VOLUME_NAME=$(hdiutil info | grep "/Volumes/" | tail -1 | awk '{print $3}')
          echo "üìÅ Mounted at: $VOLUME_NAME"
          
          # Copy app to artifacts directory
          cp -R "$VOLUME_NAME/SidourAvoda.app" ./SidourAvoda.app
          hdiutil detach "$VOLUME_NAME"
          echo "‚úÖ App extracted: ./SidourAvoda.app"
      
      - name: Get Team ID
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "üîç Getting Team ID..."
          # Try to get team ID from Apple Developer account
          TEAM_ID=$(xcrun notarytool info --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" 2>/dev/null | grep "Team ID" | awk '{print $3}' || echo "")
          if [ -z "$TEAM_ID" ]; then
            echo "‚ö†Ô∏è  Could not get Team ID automatically, using personal team"
            echo "PERSONAL_TEAM=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Found Team ID: $TEAM_ID"
            echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
            echo "PERSONAL_TEAM=false" >> $GITHUB_ENV
          fi

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ env.TEAM_ID }}
          PERSONAL_TEAM: ${{ env.PERSONAL_TEAM }}
        run: |
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_APP_SPECIFIC_PASSWORD" ]; then
            echo "‚ùå Apple credentials not configured"
            echo "Please add APPLE_ID and APPLE_APP_SPECIFIC_PASSWORD secrets"
            echo "Go to: https://github.com/joey603/Sidour_Avoda_V2/settings/secrets/actions"
            echo "Add secrets:"
            echo "  - APPLE_ID: your Apple ID email"
            echo "  - APPLE_APP_SPECIFIC_PASSWORD: gcwm-vrjv-wcuf-rern"
            exit 1
          fi
          
          echo "üîê Starting notarization..."
          
          # Create archive
          ditto -c -k --keepParent SidourAvoda.app SidourAvoda.zip
          
          # Submit for notarization
          echo "üì§ Submitting for notarization..."
          
          # Submit for notarization based on team type
          if [ "$PERSONAL_TEAM" = "true" ]; then
            echo "üîç Using personal team (no Team ID required)..."
            xcrun notarytool submit SidourAvoda.zip \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --wait
          else
            echo "üîç Using Team ID: $TEAM_ID"
            xcrun notarytool submit SidourAvoda.zip \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --team-id "$TEAM_ID" \
              --wait
          fi
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Notarization successful!"
            
            # Staple the ticket
            echo "üîó Stapling notarization ticket..."
            xcrun stapler staple SidourAvoda.app
            
            echo "‚úÖ App notarized successfully!"
          else
            echo "‚ùå Notarization failed"
            exit 1
          fi
      
      - name: Create notarized DMG
        run: |
          echo "üì¶ Creating notarized DMG..."
          
          # Create staging directory
          STAGE="notarized_dmg_staging"
          rm -rf "$STAGE"; mkdir -p "$STAGE"
          
          # Copy notarized app
          cp -R SidourAvoda.app "$STAGE/"
          
          # Add Applications symlink
          ln -s /Applications "$STAGE/Applications" || true
          
          # Add success message
          cat > "$STAGE/‚úÖ APP NOTARIS√âE.txt" <<'TXT'
          Sidour Avoda - macOS
          ====================
          
          ‚úÖ Cette app est NOTARIS√âE par Apple
          ‚úÖ Aucun avertissement de s√©curit√©
          ‚úÖ Ouverture directe possible
          
          Installation :
          1. Glisser SidourAvoda.app vers Applications
          2. Double-cliquer pour lancer
          
          Cette version a √©t√© v√©rifi√©e et approuv√©e par Apple.
          TXT
          
          # Create DMG
          ARCH=$(uname -m)
          DMG_NAME="SidourAvoda-Notarized-${ARCH}.dmg"
          hdiutil create -volname "SidourAvoda" -srcfolder "$STAGE" -ov -format UDZO "$DMG_NAME"
          
          echo "‚úÖ Notarized DMG created: $DMG_NAME"
      
      - name: Upload notarized DMG
        uses: actions/upload-artifact@v4
        with:
          name: sidour-avoda-notarized-macos
          path: SidourAvoda-Notarized-*.dmg


